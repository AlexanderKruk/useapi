{"version":3,"sources":["InfoPeople.js","InfoPlanets.js","InfoStarships.js","InfoList.js","App.js","serviceWorker.js","index.js"],"names":["InfoPeople","_ref","name","height","mass","react_default","a","createElement","className","InfoPlanets","diameter","terrain","InfoStarships","starshipClass","length","InfoList","people","planets","starships","map","user","i","src_InfoPeople","key","src_InfoPlanets","src_InfoStarships","starship_class","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","urls","Promise","all","_ref3","asyncToGenerator","regenerator_default","mark","_callee","url","resp","data","wrap","_context","prev","next","fetch","sent","json","abrupt","results","stop","_x","apply","arguments","setState","_this$state","src_InfoList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1ffcf728.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst InfoPeople = ({name, height, mass}) => {\r\n\treturn (\r\n\t\t<div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 f4 lh-copy measure'>\r\n\t\t\t<p><em>Name:</em><strong> {name} </strong></p>\r\n\t\t\t<p><em>Height:</em> {height} cm</p>\r\n\t\t\t<p><em>Weight:</em> {mass} kg </p>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default InfoPeople;","import React from 'react';\r\n\r\nconst InfoPlanets = ({name, diameter, terrain}) => {\r\n\treturn (\r\n\t\t<div className='bg-light-yellow dib br3 pa3 ma2 grow bw2 shadow-5 f4 lh-copy measure'>\r\n\t\t\t<p><em> Name: </em><strong> {name} </strong></p>\r\n\t\t\t<p><em> Diameter: </em> {diameter} km</p>\r\n\t\t\t<p><em> Terrain: </em> {terrain} </p>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default InfoPlanets;","import React from 'react';\r\n\r\nconst InfoStarships = ({name, starshipClass, length}) => {\r\n\treturn (\r\n\t\t<div className='bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-5 f4 lh-copy measure'>\r\n\t\t\t<p><em>Name:</em><strong> {name}</strong></p>\r\n\t\t\t<p><em>Class:</em> {starshipClass}</p>\r\n\t\t\t<p><em>Length:</em> {length} m</p>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default InfoStarships;","import React from 'react';\r\nimport InfoPeople from './InfoPeople';\r\nimport InfoPlanets from './InfoPlanets';\r\nimport InfoStarships from './InfoStarships';\r\n\r\nconst InfoList = ({ people, planets, starships }) => {\r\n\treturn (\r\n\t\t\t<div>\r\n\t\t\t{\r\n\t\t\t\tpeople.map((user, i) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<InfoPeople\r\n\t\t\t\t\t\t\tkey = {i} \r\n\t\t\t\t\t        name = {people[i].name}\r\n\t\t\t\t\t        height = {people[i].height}\r\n\t\t\t\t\t        mass = {people[i].mass}\r\n  \t\t\t\t\t    />\r\n\t\t\t\t\t\t);\r\n\t\t\t\t})}\r\n\t\t\t\t{\r\n\t\t\t\tplanets.map((user, i) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<InfoPlanets\r\n\t\t\t\t\t\t\tkey = {i} \r\n\t\t\t\t\t        name = {planets[i].name}\r\n\t\t\t\t\t        diameter = {planets[i].diameter}\r\n\t\t\t\t\t        terrain = {planets[i].terrain}\r\n  \t\t\t\t\t    />\r\n\t\t\t\t\t\t);\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\t{\r\n\t\t\tstarships.map((user, i) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<InfoStarships\r\n\t\t\t\t\t\t\tkey = {i} \r\n\t\t\t\t\t        name = {starships[i].name}\r\n\t\t\t\t\t        starshipClass = {starships[i].starship_class}\r\n\t\t\t\t\t        length = {starships[i].length}\r\n  \t\t\t\t\t    />\r\n\t\t\t\t\t\t);\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default InfoList;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport InfoList from './InfoList';\r\n\r\nclass App extends Component {\r\n  constructor(){\r\n    super()\r\n    this.state = {\r\n      people: [],\r\n      planets: [],\r\n      starships: []\r\n    }\r\n  }\r\n\r\nasync componentDidMount(){\r\n  const urls = [\r\n    'https://swapi.co/api/people',\r\n    'https://swapi.co/api/planets',\r\n    'https://swapi.co/api/starships'\r\n  ]\r\n  const [ people, planets, starships ] = await Promise.all(urls.map(async function (url){\r\n    const resp = await fetch(url);\r\n    const data = await resp.json();\r\n    return data.results;\r\n  }));\r\n  this.setState({people: people, planets: planets, starships: starships});\r\n} \r\n\r\n\r\n  render() {\r\n    const { people, planets, starships } = this.state;\r\n    return (\r\n      <div>\r\n      <InfoList \r\n        people = { people }\r\n        planets = { planets }\r\n        starships = { starships }\r\n      />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}